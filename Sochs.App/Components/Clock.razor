@using Sochs.Library.Models;
@using Sochs.Library.Structs;
@using Sochs.Library.Logging;
@using Sochs.Library;
@using System.Runtime;
@implements IObservable<TimeOfDayInfo>;

@inject HttpClient Http

<span>@message</span>

@code {
  private readonly HashSet<IObserver<TimeOfDayInfo>> _observers = new();
  private readonly TimeOfDayInfo _currentDateTime = new();

  private string? message;

  protected override void OnInitialized()
  {
    UpdateTimeOfDay();

    base.OnInitialized();
  }

  private void UpdateTimeOfDay()
  {
    var autoEvent = new AutoResetEvent(false);
    var stateTimer = new Timer(UpdateTimeOfDay_Callback, autoEvent, new TimeSpan(0, 0, 0), new TimeSpan(0, 0, 5));
  }

  private void UpdateTimeOfDay_Callback(Object? stateInfo)
  {
    _ = stateInfo ?? throw new ArgumentNullException(nameof(stateInfo));

    AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;

    var now = DateTime.Now;

    message = now.ToShortTimeString();

    StateHasChanged();

    UpdateTimeStatus(now);
  }

  public IDisposable Subscribe(IObserver<TimeOfDayInfo> observer)
  {
    // Check whether observer is already registered. If not, add it.
    if (_observers.Add(observer))
    {
      // Provide observer with existing data.
      observer.OnNext(_currentDateTime);
    }

    return new Unsubscriber<TimeOfDayInfo>(_observers, observer);
  }

  public void UpdateTimeStatus(DateTime currentDateTime)
  {
    var info = new TimeOfDayInfo(currentDateTime);

    foreach (IObserver<TimeOfDayInfo> observer in _observers)
    {
      observer.OnNext(info);
    }
  }
}
