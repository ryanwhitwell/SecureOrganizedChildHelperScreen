@using Sochs.Library.Enums;
@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;
@using Sochs.Library.Models;

@inject IDailyTasksService _dailyTasksService;
@inject ITimeService _timeService;
@inject IConfiguration _config;
@implements IDisposable;

<div class="container">
  <div class="row">
    <div class="col">

      <!-- Task completion interface -->
      @if (_taskData != null && _taskData.HasData)
      {
        var tasks = _taskData.GetTasks(Child, _timeOfDay, _dayType);
        
        <table class="table">
          <!-- 
          <thead>
            <tr>
              <th scope="col">Name</th>
              <th scope="col">Description</th>
              <th scope="col">Image Path</th>
            </tr>
          </thead>
          -->
          <tbody>
            @foreach (var task in tasks)
            {
              <tr>
                <td><img src="@task.Value.ImagePath" /></td>
                <td><p class="text-lg-start mx-5" style="font-size: 4rem;">@task.Value.Description</p></td>
                <td><button type="button" class="btn btn-primary-outline shadow-none" @onclick="() => UpdateTask(task.Value.Id, task.Value.IsCompleted)"><img src="@(task.Value.IsCompleted ? _config.GetString("Application:CheckedBoxImagePath") : _config.GetString("Application:UncheckedBoxImagePath"))" /></button></td>
              </tr>
            }
          </tbody>

        </table>
      }
      
    </div>
  </div>
</div>

@code {

  [Parameter]
  public Child Child { get; set; }

  private TimeOfDay _timeOfDay { get; set; }

  private DayType _dayType { get; set; }

  private DailyTaskData? _taskData { get; set; }

  public event EventHandler<DailyTaskAchievementEventArgs>? OnDailyTaskAchievement;

  public void UpdateTask(int id, bool isCompleted)
  {
    // Call the task service with the opposite value of IsCompleted in order to change the value
    _dailyTasksService.UpdateTask(id, !isCompleted);
  }

  protected override void OnInitialized()
  {
    _dailyTasksService.Child = Child;

    _dailyTasksService.OnDailyTasksReset        += HandleOnDailyTasksReset;
    _dailyTasksService.OnDailyTaskUpdated       += HandleOnDailyTaskUpdated;
    _dailyTasksService.OnActiveDailyTasksChange += HandleOnActiveDailyTasksChange;

    _timeService.OnTimeUpdated += HandleTimeUpdated;

    base.OnInitialized();
  }

  public void HandleTimeUpdated(object? sender, TimeUpdatedEventArgs args)
  {
    if (args != null)
    {
      _timeOfDay = args.TimeOfDay;
      _dayType   = args.DayType;
    }
  }

  public void HandleOnDailyTasksReset(object? sender, DailyTasksResetEventArgs args)
  {
    if (args != null)
    {
      _taskData = args.TaskData;

      var achievementArgs = new DailyTaskAchievementEventArgs()
      {
        Child = this.Child,
        TaskData = this._taskData
      };

      OnDailyTaskAchievement?.Invoke(this, achievementArgs);

      StateHasChanged();
    }
  }

  public void HandleOnDailyTaskUpdated(object? sender, DailyTaskUpdatedEventArgs args)
  {
    if (args != null)
    {
      _taskData = args.TaskData;

      var achievementArgs = new DailyTaskAchievementEventArgs()
      {
        Child = this.Child,
        TaskData = this._taskData
      };

      OnDailyTaskAchievement?.Invoke(this, achievementArgs);

      StateHasChanged();
    }
  }

  public void HandleOnActiveDailyTasksChange(object? sender, ActiveDailyTasksChangeEventArgs args)
  {
    if (args != null)
    {
      _taskData = args.TaskData;

      var achievementArgs = new DailyTaskAchievementEventArgs()
      {
        Child = this.Child,
        TaskData = this._taskData
      };

      OnDailyTaskAchievement?.Invoke(this, achievementArgs);

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    _dailyTasksService.OnDailyTasksReset        -= HandleOnDailyTasksReset;
    _dailyTasksService.OnDailyTaskUpdated       -= HandleOnDailyTaskUpdated;
    _dailyTasksService.OnActiveDailyTasksChange -= HandleOnActiveDailyTasksChange;
  }
}
