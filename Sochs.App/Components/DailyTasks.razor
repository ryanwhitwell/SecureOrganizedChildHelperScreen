@using Sochs.Library.Enums;
@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;
@using Sochs.Library.Models;

@inject IDailyTasksService _dailyTasksService;
@inject ITimeService _timeService;
@implements IDisposable;

<div class="container">
  <div class="row">
    <div class="col">

      <!-- Task completion interface -->
      @if (_taskData != null && _taskData.HasData)
      {
        var tasks = _taskData.GetTasks(Child, _timeOfDay);
        
        <ul>
        @foreach (var task in tasks)
        {
          <li id="@task.Key">@task.Value.Description</li>
        }
        </ul>
      }
      
    </div>
  </div>
</div>

@code {

  [Parameter]
  public Child Child { get; set; }

  private TimeOfDay _timeOfDay { get; set; }

  private DailyTaskData? _taskData { get; set; }

  protected override void OnInitialized()
  {
    _dailyTasksService.Child = Child;

    _dailyTasksService.OnDailyTasksReset        += HandleOnDailyTasksReset;
    _dailyTasksService.OnDailyTaskUpdated       += HandleOnDailyTaskUpdated;
    _dailyTasksService.OnActiveDailyTasksChange += HandleOnActiveDailyTasksChange;

    _timeService.OnTimeUpdated += HandleTimeUpdated;

    base.OnInitialized();
  }

  public void HandleTimeUpdated(object? sender, TimeUpdatedEventArgs args)
  {
    if (args != null)
    {
      _timeOfDay = args.TimeOfDay;
    }
  }

  public void HandleOnDailyTasksReset(object? sender, DailyTasksResetEventArgs args)
  {
    if (args != null)
    {
      _taskData = args.TaskData;

      StateHasChanged();
    }
  }

  public void HandleOnDailyTaskUpdated(object? sender, DailyTaskUpdatedEventArgs args)
  {
    if (args != null)
    {
      _taskData = args.TaskData;

      StateHasChanged();
    }
  }

  public void HandleOnActiveDailyTasksChange(object? sender, ActiveDailyTasksChangeEventArgs args)
  {
    if (args != null)
    {
      _taskData = args.TaskData;

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    _dailyTasksService.OnDailyTasksReset        -= HandleOnDailyTasksReset;
    _dailyTasksService.OnDailyTaskUpdated       -= HandleOnDailyTaskUpdated;
    _dailyTasksService.OnActiveDailyTasksChange -= HandleOnActiveDailyTasksChange;
  }
}
