@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;
@inject ITimeService _timeService;
@implements IDisposable;

<div class="container">
  <div class="row">
    <!-- Time of Day -->
    <div class="col-9 px-5">
      <h2 class="display" style="font-size: 9rem;">@timeAsString</h2>
    </div>
    <div class="col">
      <img src="@timeOfDayImagePath" />
    </div>
  </div>
  <div class="row">
    <!-- Day of Week -->
    <div class="col-9 px-5">
      <h1 class="display" style="font-size: 9rem;">@dayOfWeekAsString</h1>
    </div>
    <div class="col">
      <img src="@dayOfWeekImagePath" />
    </div>

  </div>
  <div class="row">
    <!-- Date & Season -->
    <div class="col-9 px-5">
      <h1 class="display" style="font-size: 9rem;">@dateAsString</h1>
    </div>
    <div class="col">
      <img src="@seasonImagePath" />
    </div>
  </div>
</div>





@code {
  private string? timeAsString;
  private string? timeOfDayImagePath;

  private string? dayOfWeekAsString;
  private string? dayOfWeekImagePath;

  private string? dateAsString;
  private string? seasonImagePath;


  protected override void OnInitialized()
  {
    _timeService.OnTimeUpdated += Handle;

    base.OnInitialized();
  }

  public void Handle(object? sender, TimeUpdatedEventArgs args)
  {
    if (args != null)
    {
      timeAsString       = args.DateTime.ToShortTimeString();
      timeOfDayImagePath = args.TimeOfDayImagePath;
      dayOfWeekAsString  = args.DateTime.DayOfWeek.ToString();
      dayOfWeekImagePath = args.DayOfWeekImagePath;
      dateAsString       = args.DateTime.ToShortDateString();
      seasonImagePath    = args.SeasonImagePath;

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    _timeService.OnTimeUpdated -= Handle;
  }
}
