@inject ITimeService _timeService;
@inject IJSRuntime _js
@implements IDisposable;

<div class="col-12 mt-5">
  <div class="card shadow-lg">
    <!--
    <div class="card-header">
      Time
    </div>
    -->
    <div class="card-body">
      <div class="container">

        <!-- Time of Day -->
        <div class="row">
          <div class="col-10">
            <h1 class="display" style="font-size: 8rem;">@timeAsString</h1>
          </div>
          <div class="col">
            <img src="@timeOfDayImagePath" />
          </div>
        </div>

        <!-- Day of Week -->
        <div class="row">
          <div class="col-10">
            <h1 class="display" style="font-size: 7rem;">@dayOfWeekAsString</h1>
          </div>
          <div class="col">
            <img src="@dayOfWeekImagePath" />
          </div>
        </div>

        <!-- Date & Season -->
        <div class="row">
          <div class="col-10">
            <h1 class="display-4" style="font-size: 7rem;">@dateAsString</h1>
          </div>
          <div class="col">
            <img src="@seasonImagePath" />
          </div>
        </div>

        @if(showXmasCountdown)
        {
          <!-- Xmas Countdown -->
          <div class="row">
            <div class="col-10">
              <h1 class="display" style="font-size: 7rem;">Days 'til Xmas</h1>
            </div>
            <div class="col">
              <h1 class="display" style="font-size: 7rem;">@timeUntilXmas.Days</h1>
            </div>
          </div>
        }
      </div>
    </div>

  </div>
</div>

@code {
  // School Alarm 08:03 AM every weekday
  private const int SchoolAlarmTimeHour   = 8; 
  private const int SchoolAlarmTimeMinute = 3;

  private bool SchoolAlarmHasTriggered = false;

  private string? timeAsString;
  private string? timeOfDayImagePath;

  private string? dayOfWeekAsString;
  private string? dayOfWeekImagePath;

  private string? dateAsString;
  private string? seasonImagePath;

  private bool showXmasCountdown = false;
  private TimeSpan timeUntilXmas;

  private void AlertTimeForSchool(DateTime now, DayType dayType)
  {
    try
    {
      var doAlert = now.Hour == SchoolAlarmTimeHour && now.Minute == SchoolAlarmTimeMinute && !SchoolAlarmHasTriggered && dayType == DayType.Weekday;

      if (doAlert)
      {
        SchoolAlarmHasTriggered = true;

        _js.InvokeVoidAsync("playClockAlarm");
      }
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Time.AlertTimeForSchool. {e.ToString()}");
    }
  }

  protected override void OnInitialized()
  {
    try
    {
      _timeService.OnTimeUpdated += Handle;

      base.OnInitialized();
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Time.AlertTimeForSchool. {e.ToString()}");
    }
  }

  public void Handle(object? sender, TimeUpdatedEventArgs args)
  {
    try
    {
      if (args != null)
      {
        timeAsString = args.DateTime.ToShortTimeString();
        timeOfDayImagePath = args.TimeOfDayImagePath;
        dayOfWeekAsString = args.DateTime.DayOfWeek.ToString();
        dayOfWeekImagePath = args.DayOfWeekImagePath;
        dateAsString = args.DateTime.ToShortDateString();
        seasonImagePath = args.SeasonImagePath;
        timeUntilXmas = args.TimeUntilXmas;

        // Set dark/light mode
        string mode = args.EnableDarkMode ? "dark" : "light";
        _js.InvokeVoidAsync("setTheme", mode);

        // Trigger Alarm for school
        AlertTimeForSchool(args.DateTime, args.DayType);

        showXmasCountdown = timeUntilXmas.Days <= TimeService.XmasDaysThreshold;

        StateHasChanged();
      }
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Time.Handle. {e.ToString()}");
    }
  }

  public void Dispose()
  {
    try
    {
      _timeService.OnTimeUpdated -= Handle;
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Time.Handle. {e.ToString()}");
    }
  }
}
