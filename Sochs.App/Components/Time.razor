@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;
@inject ITimeService _timeService;
@implements IDisposable;

<div class="col-12 mt-5">
  <div class="card shadow-lg">
    <!--
    <div class="card-header">
      Time
    </div>
    -->
    <div class="card-body">
      <div class="container">

        <!-- Time of Day -->
        <div class="row">
          <div class="col-9">
            <h1 class="display" style="font-size: 8rem;">@timeAsString</h1>
          </div>
          <div class="col">
            <img src="@timeOfDayImagePath" />
          </div>
        </div>

        <!-- Day of Week -->
        <div class="row">
          <div class="col-9">
            <h1 class="display" style="font-size: 8rem;">@dayOfWeekAsString</h1>
          </div>
          <div class="col">
            <img src="@dayOfWeekImagePath" />
          </div>
        </div>

        <!-- Date & Season -->
        <div class="row">
          <div class="col-9">
            <h1 class="display" style="font-size: 8rem;">@dateAsString</h1>
          </div>
          <div class="col">
            <img src="@seasonImagePath" />
          </div>
        </div>
        
      </div>
    </div>

  </div>
</div>

@code {
  private string? timeAsString;
  private string? timeOfDayImagePath;

  private string? dayOfWeekAsString;
  private string? dayOfWeekImagePath;

  private string? dateAsString;
  private string? seasonImagePath;


  protected override void OnInitialized()
  {
    _timeService.OnTimeUpdated += Handle;

    base.OnInitialized();
  }

  public void Handle(object? sender, TimeUpdatedEventArgs args)
  {
    if (args != null)
    {
      timeAsString       = args.DateTime.ToShortTimeString();
      timeOfDayImagePath = args.TimeOfDayImagePath;
      dayOfWeekAsString  = args.DateTime.DayOfWeek.ToString();
      dayOfWeekImagePath = args.DayOfWeekImagePath;
      dateAsString       = args.DateTime.ToShortDateString();
      seasonImagePath    = args.SeasonImagePath;

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    _timeService.OnTimeUpdated -= Handle;
  }
}
