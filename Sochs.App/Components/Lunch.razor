@inject ILunchService _lunchService;
@inject IJSRuntime _js;
@implements IDisposable;

<div class="col-6 @(showComponent ? "visible mt-5" : "invisible")">

  <!-- Today Lunch Menu -->
  <div class="card shadow-lg">
    <h5 class="card-header">
      Today's Lunch Menu
    </h5>

    <ul class="list-group list-group-flush">
      @{
        if (todayLunch != null && todayLunch.Any())
        {
          foreach (var item in todayLunch)
          {
            <li class="list-group-item">@item</li>
          }
        }
      }
    </ul>

  </div>

</div>

<div class="col-6 @(showComponent ? "visible mt-5" : "invisible")">
  <!-- Tomorrow Lunch Menu -->
  <div class="card shadow-lg">
    <h5 class="card-header">
      Tomorrow's Lunch Menu
    </h5>

    <ul class="list-group list-group-flush">
      @{
        if (tomorrowLunch != null && tomorrowLunch.Any())
        {
          foreach (var item in tomorrowLunch)
          {
            <li class="list-group-item">@item</li>
          }
        }
      }
    </ul>
  </div>

</div>


@code {
  private bool showComponent;

  private IEnumerable<string>? todayLunch;
  private IEnumerable<string>? tomorrowLunch;

  protected override void OnInitialized()
  {
    try
    {
      _lunchService.OnLunchUpdated += Handle;

      base.OnInitialized();
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Lunch.OnInitialized. {e.ToString()}");
    }
  }

  public void Handle(object? sender, LunchUpdatedEventArgs args)
  {
    try
    {
      if (args != null)
      {
        // Only show component when there's data to show
        showComponent = args.HasData;

        if (showComponent)
        {
          todayLunch = args.TodayLunch;
          tomorrowLunch = args.TomorrowLunch;
        }

        StateHasChanged();
      }
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Lunch.OnInitialized. {e.ToString()}");
    }
  }

  public void Dispose()
  {
    try
    {
      _lunchService.OnLunchUpdated -= Handle;
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in Lunch.Dispose. {e.ToString()}");
    }
  }
}
