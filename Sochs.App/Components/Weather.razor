@using Sochs.Library.Enums;
@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;
@using Sochs.Library.Models;
@inject IConfiguration _config;
@inject ILogger<Weather> _log;
@inject IWeatherService _weatherService;
@implements IDisposable;


<div class="col-sm-6 text-center" style="background-color: blue;">
  <img src="@conditionImagePath"/>
  <p style="font-size: 4rem;">@condition</p>
</div>
<div class="col-sm-6 text-center" style="background-color: blue;">
  <img src="@temperatureImagePath"/>
  <p style="font-size: 4em;">@temperature°F </p>
</div>

@code {
  private string? temperature;
  private string? condition;
  private string? conditionImagePath;
  private string? temperatureImagePath;

  protected override void OnInitialized()
  {
    _weatherService.OnWeatherUpdated += Handle;

    base.OnInitialized();
  }

  public void Handle(object? sender, WeatherUpdatedEventArgs args)
  {
    if (args != null && args.WeatherInfo != null)
    {
      temperature          = args.WeatherInfo.Current?.FeelsLikeF.ToString("N0");
      condition            = args.WeatherInfo.Current?.Condition?.Text;
      conditionImagePath   = args.WeatherInfo.Current?.Condition?.ImagePath;
      temperatureImagePath = args.WeatherInfo.Current?.TemperatureImagePath;

      _log.LogTrace("Condition Image Path: {conditionImagePath}", conditionImagePath);

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    _weatherService.OnWeatherUpdated -= Handle;
  }
}
