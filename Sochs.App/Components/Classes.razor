@using Sochs.Library.Enums;
@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;

@inject IClassService _classService;
@implements IDisposable;

<div class="col-3 @(todayIsWeekday || tomorrowIsWeekday ? "visible mt-3" : "invisible")">

  <!-- Todays Special Class -->
  <div class="card shadow-lg">
    <!--
    <h5 class="card-header">
      Today
    </h5>
    -->
    <div class="card-body text-center">
      @if(todayIsWeekday)
      {
        <img src="@todaysSpecialClassImagePath" />
        <p class="mb-0" style="font-size: 2rem;">@todaysSpecialClass</p>
      }
    </div>

  </div>
</div>

<div class="col-3 @(todayIsWeekday || tomorrowIsWeekday ? "visible mt-3" : "invisible")">

  <!-- Tomorrow Special Class -->
  <div class="card shadow-lg">
    <!--
    <h5 class="card-header">
      Tomorrow
    </h5>
    -->
    <div class="card-body text-center">
      @if (tomorrowIsWeekday)
      {
        <img src="@tomorrowSpecialClassImagePath" />
        <p class="mb-0" style="font-size: 2rem;">@tomorrowSpecialClass</p>
      }
    </div>

  </div>
</div>

@code {
  private string? todaysSpecialClass;
  private string? todaysSpecialClassImagePath;
  private bool todayIsWeekday;

  private string? tomorrowSpecialClass;
  private string? tomorrowSpecialClassImagePath;
  private bool tomorrowIsWeekday;

  [Parameter]
  public Child Child { get; set; }

  protected override void OnInitialized()
  {
    _classService.Child = Child;

    _classService.OnClassesUpdated += Handle;

    base.OnInitialized();
  }

  public void Handle(object? sender, ClassesUpdatedEventArgs args)
  {
    if (args != null)
    {
      todaysSpecialClass            = args.TodaysSpecialClass;
      todaysSpecialClassImagePath   = args.TodaysSpecialClassImagePath;
      todayIsWeekday                = args.TodayIsWeekday;
      tomorrowSpecialClass          = args.TomorrowSpecialClass;
      tomorrowSpecialClassImagePath = args.TomorrowSpecialClassImagePath;
      tomorrowIsWeekday             = args.TomorrowIsWeekday;

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    _classService.OnClassesUpdated -= Handle;
  }
}
