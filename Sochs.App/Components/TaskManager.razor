@inject ITimeService _timeService;
@inject IConfiguration _config;
@inject ILogger<TaskManager> _log;
@inject IJSRuntime _js;

@implements IDisposable;

<div class="col-lg-6 mt-5 align-self-end">
  <div class="card shadow-lg">

    <!--
    <div class="card-header">
      @Child.ToString()
    </div>
    -->

    <div class="card-body">
      <div class="container">
        <div class="row">
          <div class="col text-center">

            <img src="@_childAvatarImagePath" />
            <button type="button" class="btn shadow-none" style="background-color:transparent;z-index:999;width: 200px;position: absolute;height: 275px;margin-left: -200px;" @onclick="() => TaskDialog?.Open()"></button>
            
            <TaskModalDialog @ref="@TaskDialog" Title=@($"{Child.ToString()}'s Tasks")>
              <DailyTasks @ref="@DailyTasks" Child=Child />
            </TaskModalDialog>

          </div>

          <div class="container" style="position:absolute">
            <div class="row">
              <div class="col @(_morningTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:MorningTasksAchievementImagePath")" />
              </div>
              <div class="col @(_afternoonTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:AfternoonTasksAchievementImagePath")" />
              </div>
            </div>
            <div class="row">
              <div class="col @(_eveningTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:EveningTasksAchievementImagePath")" />
              </div>
              <div class="col @(_nightTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:NightTasksAchievementImagePath")" />
            </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
</div>

@code {
  [Parameter]
  public Child Child { get; set; }

  private TaskModalDialog? TaskDialog { get; set; }

  private string? _childAvatarImagePath { get; set; }

  private DailyTasks? DailyTasks { get; set; }

  private TimeOfDay _timeOfDay { get; set; }

  private DayOfWeek _dayOfWeek { get; set; }

  private bool _morningTasksCompleted;
  private bool _afternoonTasksCompleted;
  private bool _eveningTasksCompleted;
  private bool _nightTasksCompleted;

  protected override void OnAfterRender(bool firstRender)
  {
    try
    {
      if (firstRender && DailyTasks != null)
      {
        DailyTasks.OnDailyTaskAchievement += HandleAchievementEvent;
      }

      if (firstRender && TaskDialog != null)
      {
        TaskDialog.OnOpen += HandleModalOpen;
      }

      base.OnAfterRender(firstRender);

    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in TaskManager.OnAfterRender. {e.ToString()}");
    }
  }

  protected override void OnInitialized()
  {
    try
    {
      _timeService.OnTimeUpdated += HandleTimeUpdated;

      if (Child == Child.Alice)
      {
        _childAvatarImagePath = _config.GetString("Application:AliceAvatarImagePath");
      }
      else if (Child == Child.Clara)
      {
        _childAvatarImagePath = _config.GetString("Application:ClaraAvatarImagePath");
      }

      base.OnInitialized();
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in TaskManager.OnInitialized. {e.ToString()}");
    }
  }

  public void HandleTimeUpdated(object? sender, TimeUpdatedEventArgs args)
  {
    try
    {
      if (args != null)
      {
        _timeOfDay = args.TimeOfDay;
        _dayOfWeek = args.DateTime.DayOfWeek;
      }
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in TaskManager.HandleTimeUpdated. {e.ToString()}");
    }
  }

  private void HandleModalOpen(object? sender, EventArgs args)
  {
    try
    {
      var timeOfDay = TimeService.GetTimeOfDay(DateTime.Now);
      DailyTasks?.SetTimeOfDay(timeOfDay);
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in TaskManager.HandleModalOpen. {e.ToString()}");
    }
  }

  private void HandleAchievementEvent(object? sender, DailyTaskAchievementEventArgs args)
  {
    try
    {
      if (args != null && args.TaskData != null)
      {
        // Get new task states for time of day
        var morningTasksCompleted = args.TaskData.MorningTasksCompleted(Child, _dayOfWeek);
        var afternoonTasksCompleted = args.TaskData.AfternoonTasksCompleted(Child, _dayOfWeek);
        var eveningTasksCompleted = args.TaskData.EveningTasksCompleted(Child, _dayOfWeek);
        var nightTasksCompleted = args.TaskData.NightTasksCompleted(Child, _dayOfWeek);

        // Get new task state for whole day
        var oldAllTasksCompleted = _morningTasksCompleted && _afternoonTasksCompleted && _eveningTasksCompleted && _nightTasksCompleted;
        var newAllTasksCompleted = morningTasksCompleted && afternoonTasksCompleted && eveningTasksCompleted && nightTasksCompleted;

        // Aggregate task state for whole day
        var isNewAllTasksCompleted = !oldAllTasksCompleted && newAllTasksCompleted;

        // Aggregate tasks state for time of day
        var isNewMorningTasksCompleted = !_morningTasksCompleted && morningTasksCompleted;
        var isNewAfternoonTasksCompleted = !_afternoonTasksCompleted && afternoonTasksCompleted;
        var isNewEveningTasksCompleted = !_eveningTasksCompleted && eveningTasksCompleted;
        var isNewNightTasksCompleted = !_nightTasksCompleted && nightTasksCompleted;

        // Update private member values for UI
        _morningTasksCompleted = morningTasksCompleted;
        _afternoonTasksCompleted = afternoonTasksCompleted;
        _eveningTasksCompleted = eveningTasksCompleted;
        _nightTasksCompleted = nightTasksCompleted;

        // If state change is for whole day, play whole day achievement sound, other wise only play the time of day achivement sound
        if (isNewAllTasksCompleted)
        {
          _js.InvokeVoidAsync("playCompleteAllTasks");
        }
        else if (isNewMorningTasksCompleted || isNewAfternoonTasksCompleted || isNewEveningTasksCompleted || isNewNightTasksCompleted)
        {
          _js.InvokeVoidAsync("playCompleteAchievement");
        }

        StateHasChanged();
      }
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in TaskManager.HandleAchievementEvent. {e.ToString()}");
    }
  }

  public void Dispose()
  {
    try
    {
      if (DailyTasks != null)
      {
        DailyTasks.OnDailyTaskAchievement -= HandleAchievementEvent;
      }
    }
    catch (Exception e)
    {
      _js.InvokeVoidAsync("alert", $"Error in TaskManager.Dispose. {e.ToString()}");
    }
  }
}
