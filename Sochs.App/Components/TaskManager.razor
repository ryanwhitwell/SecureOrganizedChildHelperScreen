@using Sochs.Library.Enums;
@using Sochs.Library.Events;
@using Sochs.Library.Interfaces;
@using Sochs.Library;
@using System.Runtime;
@using System.Text.Json;

@inject ITimeService _timeService;
@inject IConfiguration _config;
@inject ILogger<TaskManager> _log;
@inject IAudioService _audioService;

@implements IDisposable;

<div class="col-lg-6 mt-5 align-self-end">
  <div class="card shadow-lg">

    <!--
    <div class="card-header">
      @Child.ToString()
    </div>
    -->

    <div class="card-body">
      <div class="container">
        <div class="row">
          <div class="col text-center">

            <img src="@_childAvatarImagePath" />
            <button type="button" class="btn shadow-none" style="background-color:transparent;z-index:999;width: 200px;position: absolute;height: 275px;margin-left: -200px;" @onclick="() => TaskDialog?.Open()"></button>
            
            <ModalDialog @ref="@TaskDialog" Title=@($"{Child.ToString()}'s Tasks")>
              <DailyTasks @ref="@DailyTasks" Child=Child />
            </ModalDialog>

          </div>

          <div class="container" style="position:absolute">
            <div class="row">
              <div class="col @(_morningTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:MorningTasksAchievementImagePath")" />
              </div>
              <div class="col @(_afternoonTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:AfternoonTasksAchievementImagePath")" />
              </div>
            </div>
            <div class="row">
              <div class="col @(_eveningTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:EveningTasksAchievementImagePath")" />
              </div>
              <div class="col @(_nightTasksCompleted ? "visible" : "invisible")" style="margin-left: 10px;">
                <img src="@_config.GetString($"Achievements:{Child}:NightTasksAchievementImagePath")" />
            </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
</div>

@code {
  [Parameter]
  public Child Child { get; set; }

  private ModalDialog? TaskDialog { get; set; }

  private string? _childAvatarImagePath { get; set; }

  private DailyTasks? DailyTasks { get; set; }

  private TimeOfDay _timeOfDay { get; set; }

  private DayType _dayType { get; set; }

  private bool _morningTasksCompleted;
  private bool _afternoonTasksCompleted;
  private bool _eveningTasksCompleted;
  private bool _nightTasksCompleted;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender && DailyTasks != null)
    {
      DailyTasks.OnDailyTaskAchievement += HandleAchievementEvent;
    }

    base.OnAfterRender(firstRender);
  }

  protected override void OnInitialized()
  {
    _timeService.OnTimeUpdated += HandleTimeUpdated;

    if (Child == Child.Alice)
    {
      _childAvatarImagePath = _config.GetString("Application:AliceAvatarImagePath");
    }
    else if (Child == Child.Clara)
    {
      _childAvatarImagePath = _config.GetString("Application:ClaraAvatarImagePath");
    }

    base.OnInitialized(); 
  }

  public void HandleTimeUpdated(object? sender, TimeUpdatedEventArgs args)
  {
    if (args != null)
    {
      _timeOfDay = args.TimeOfDay;
      _dayType = args.DayType;
    }
  }

  private void HandleAchievementEvent(object? sender, DailyTaskAchievementEventArgs args)
  {
    if (args != null && args.TaskData != null)
    {
      var morningTasksCompleted   = args.TaskData.MorningTasksCompleted(Child, _dayType);
      var afternoonTasksCompleted = args.TaskData.AfternoonTasksCompleted(Child, _dayType);
      var eveningTasksCompleted   = args.TaskData.EveningTasksCompleted(Child, _dayType);
      var nightTasksCompleted     = args.TaskData.NightTasksCompleted(Child, _dayType);

      var oldAllTasksCompleted = _morningTasksCompleted && _afternoonTasksCompleted && _eveningTasksCompleted && _nightTasksCompleted;
      var newAllTasksCompleted = morningTasksCompleted && afternoonTasksCompleted && eveningTasksCompleted && nightTasksCompleted;

      var isNewAllTasksCompleted = !oldAllTasksCompleted && newAllTasksCompleted;

      var isNewMorningTasksCompleted   = !_morningTasksCompleted && morningTasksCompleted;
      var isNewAfternoonTasksCompleted = !_afternoonTasksCompleted && afternoonTasksCompleted;
      var isNewEveningTasksCompleted   = !_eveningTasksCompleted && eveningTasksCompleted;
      var isNewNightTasksCompleted     = !_nightTasksCompleted && nightTasksCompleted;

      _morningTasksCompleted   = morningTasksCompleted;
      _afternoonTasksCompleted = afternoonTasksCompleted;
      _eveningTasksCompleted   = eveningTasksCompleted;
      _nightTasksCompleted     = nightTasksCompleted;

      if (isNewAllTasksCompleted)
      {
        _audioService.PlayAudioFile(AudioService.CompletedAllTasks);
      }
      else if (isNewMorningTasksCompleted || isNewAfternoonTasksCompleted || isNewEveningTasksCompleted || isNewNightTasksCompleted)
      {
        _audioService.PlayAudioFile(AudioService.CompletedAchievement);
      }

      StateHasChanged();
    }
  }

  public void Dispose()
  {
    if (DailyTasks != null)
    {
      DailyTasks.OnDailyTaskAchievement -= HandleAchievementEvent;
    }
  }
}
